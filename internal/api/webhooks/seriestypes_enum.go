// Code generated by "go-enum -type=SeriesTypes -all=false -string=true -new=true -text=true -json=true -yaml=false"; DO NOT EDIT.

// Install go-enum by `go get -u github.com/searKing/golang/tools/go-enum`
package webhooks

import (
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[standard-0]
	_ = x[daily-1]
	_ = x[anime-2]
}

const _SeriesTypes_name = "standarddailyanime"

var _SeriesTypes_index = [...]uint8{0, 8, 13, 18}

func _() {
	var _nil_SeriesTypes_value = func() (val SeriesTypes) { return }()

	// An "cannot convert SeriesTypes literal (type SeriesTypes) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_SeriesTypes_value
}

func (i SeriesTypes) String() string {
	if i >= SeriesTypes(len(_SeriesTypes_index)-1) {
		return "SeriesTypes(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SeriesTypes_name[_SeriesTypes_index[i]:_SeriesTypes_index[i+1]]
}

// New returns a pointer to a new addr filled with the SeriesTypes value passed in.
func (i SeriesTypes) New() *SeriesTypes {
	clone := i
	return &clone
}

var _SeriesTypes_values = []SeriesTypes{0, 1, 2}

var _SeriesTypes_name_to_values = map[string]SeriesTypes{
	_SeriesTypes_name[0:8]:   0,
	_SeriesTypes_name[8:13]:  1,
	_SeriesTypes_name[13:18]: 2,
}

// ParseSeriesTypesString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseSeriesTypesString(s string) (SeriesTypes, error) {
	if val, ok := _SeriesTypes_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SeriesTypes values", s)
}

// SeriesTypesValues returns all values of the enum
func SeriesTypesValues() []SeriesTypes {
	return _SeriesTypes_values
}

// IsASeriesTypes returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SeriesTypes) Registered() bool {
	for _, v := range _SeriesTypes_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_SeriesTypes_value = func() (val SeriesTypes) { return }()

	// An "cannot convert SeriesTypes literal (type SeriesTypes) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_SeriesTypes_value

	// An "cannot convert SeriesTypes literal (type SeriesTypes) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_SeriesTypes_value
}

// MarshalJSON implements the json.Marshaler interface for SeriesTypes
func (i SeriesTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SeriesTypes
func (i *SeriesTypes) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SeriesTypes should be a string, got %s", data)
	}

	var err error
	*i, err = ParseSeriesTypesString(s)
	return err
}

func _() {
	var _nil_SeriesTypes_value = func() (val SeriesTypes) { return }()

	// An "cannot convert SeriesTypes literal (type SeriesTypes) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_SeriesTypes_value

	// An "cannot convert SeriesTypes literal (type SeriesTypes) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_SeriesTypes_value
}

// MarshalText implements the encoding.TextMarshaler interface for SeriesTypes
func (i SeriesTypes) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SeriesTypes
func (i *SeriesTypes) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseSeriesTypesString(string(text))
	return err
}
